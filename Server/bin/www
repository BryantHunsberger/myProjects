#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const cors = require("cors");
var debug = require('debug')('appforexpress:server');
var http = require('http');
const nodemailer = require('nodemailer');

var bodyparser = require('body-parser');

//app.use(express.static(path.join(__dirname, 'build')));

app.use(cors());
app.use(bodyparser.json());
app.use(bodyparser.urlencoded({extended : true}));

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// Mail Info //

///////////////////////////////////////


let usersemail;
let usersname;
let userstext;
let usersheader;
let usersnumber;

app.post("/", (req, res) => {
    userstext = req.body.text;
    usersemail = req.body.email;
    usersname = req.body.name;
    usersheader = req.body.header;
    usersnumber = req.body.number;

    let concattext = "Name: " + usersname + "\nEmail: " + usersemail + "\nNumber: " + usersnumber + "\nMessage: " + userstext;

    const transporter = nodemailer.createTransport({
        service : 'gmail',
        auth: {
            user : "bryantportfolioemail@gmail.com",
            pass : 'fuppyp-qoxwin-7vorMo'
        }
    });

    const options = {
        from: "bryantportfolioemail@gmail.com",
        to: 'Bryant.Hunsberger@gmail.com',
        subject: usersheader,
        text : concattext
    };

    transporter.sendMail(options, function(err, info)
    {
        if(err)
        {
            console.log(err);
            return;
        }
        console.log("sent: " + info.response);
    });
});

